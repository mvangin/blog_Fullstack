[{"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/index.js":"1","/home/marcus/Desktop/websites/express-blogAPI/client/src/app/index.js":"2","/home/marcus/Desktop/websites/express-blogAPI/client/src/components/NavbarComponent.jsx":"3","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/PostList.jsx":"4","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/SignUp.jsx":"5","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Logout.jsx":"6","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Post.jsx":"7","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/LoginSignup.jsx":"8","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Homepage.jsx":"9","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/CommentCreate.jsx":"10","/home/marcus/Desktop/websites/express-blogAPI/client/src/api/index.js":"11","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/index.js":"12","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Login.jsx":"13","/home/marcus/Desktop/websites/express-blogAPI/client/src/index.js":"14"},{"size":75,"mtime":1607402468920,"results":"15","hashOfConfig":"16"},{"size":1238,"mtime":1607642016758,"results":"17","hashOfConfig":"16"},{"size":1454,"mtime":1607920340629,"results":"18","hashOfConfig":"16"},{"size":2516,"mtime":1607631863115,"results":"19","hashOfConfig":"16"},{"size":1460,"mtime":1608185417960,"results":"20","hashOfConfig":"16"},{"size":710,"mtime":1607321264545,"results":"21","hashOfConfig":"16"},{"size":2424,"mtime":1607479096493,"results":"22","hashOfConfig":"16"},{"size":1042,"mtime":1608185405240,"results":"23","hashOfConfig":"16"},{"size":621,"mtime":1607321003003,"results":"24","hashOfConfig":"16"},{"size":1300,"mtime":1608185366761,"results":"25","hashOfConfig":"16"},{"size":1209,"mtime":1608085907604,"results":"26","hashOfConfig":"16"},{"size":297,"mtime":1607642168353,"results":"27","hashOfConfig":"16"},{"size":2270,"mtime":1608185394748,"results":"28","hashOfConfig":"16"},{"size":141,"mtime":1607028531746,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1iejoef",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/index.js",[],["65","66"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/app/index.js",[],["67","68"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/NavbarComponent.jsx",[],["69","70"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/PostList.jsx",["71"],"import React, { useEffect, useState } from 'react'\nimport api from '../api'\nimport { nanoid } from 'nanoid'\nimport { Link } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\n\n\nfunction PostList() {\n\n    const [posts, setPosts] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    useEffect(() => {\n        setIsLoading(true)\n        async function fetchData() {\n            await api.getAllPosts().then(postsRes => {\n                let data = postsRes.data.data\n                let publishedData = data.filter(dataItem => dataItem.published ===true)\n                //let data = postsRes.data.data\n                setPosts(publishedData)\n                setIsLoading(false);\n            })\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex justify-content-center justify-content-md-around flex-wrap text-center\">\n                {\n                    posts.map((item) => {\n                        return (\n                            <Card key={nanoid()} style={{ width: '18rem', margin: '10px' }}>\n                                <Card.Body>\n                                    <Card.Header><b>{item.title} </b></Card.Header>\n                                    <Card.Title> </Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">\n                                        {item.username ? <span> Posted by: <i>{item.username.username} </i> </span> : null}\n                                    </Card.Subtitle>\n\n                                    <Link className=\"text-white\" to={`/posts/${item._id}`} >\n                                        <Button>\n                                            See More\n                                            </Button>\n                                    </Link>\n                                    \n\n\n                                </Card.Body>\n\n                            </Card>\n\n                            /*  <div key={nanoid()}>\n                                   <Link to={`/posts/${item._id}`}> <b> {item.title}  </b></Link>\n                           : {item.content}. {item.username ? <span> Posted by: <i>{item.username.username} </i> </span> : null}\n                               </div>\n                               */\n                        )\n                    })\n\n                }\n            </div>\n        </div>\n\n    )\n\n}\n\n\nexport default PostList\n\n\n","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/SignUp.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Logout.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Post.jsx",["72","73","74"],"import React, { useEffect, useState } from 'react'\nimport api from '../api'\nimport { nanoid } from 'nanoid'\nimport { Link } from 'react-router-dom'\nimport CommentCreate from \"./CommentCreate\"\n\nfunction Post({ match, user }) {\n\n    const [post, setPost] = useState([]);\n    const [comments, setComments] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n    let postID = match.params.id\n\n\n    async function fetchData() {\n        await api.getPostByID(postID)\n            .then(res => {\n                setPost(res.data.posts);\n                setComments(res.data.comments);\n                setIsLoading(false);\n            })\n    }\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetchData();\n    }, [])\n\n    return (\n        <>\n            <div className='postContainer'>\n                <div className=\"sizeContainer\">\n                    <div>\n                        <h1><b> {post.title}  </b>  </h1>\n\n                        <div className=\"postAuthor\">\n                            By <i> {post.username ? post.username.username : null} </i>\n                        </div>\n                        <br />\n                        {post.content}\n                    </div>\n\n                    <div>\n                        <CommentCreate user={user} postID={postID} fetchData={fetchData} />\n                    </div>\n\n                    <div className=\"allCommentsContainer\">\n                        <b> Comments </b>\n\n                        <div>\n                            {\n                                comments.map(comment => {\n                                    return <div key={nanoid()} className=\"commentContainer\">\n                                        <img src=\"/avatar.jpg\" style={{ width: \"20px\" }} alt=\"avatar\" />\n                                        {comment.username ?\n                                            <span>\n                                                <b>  {comment.username.username} </b>\n                                            </span>\n                                            : null}\n                                        <div className=\"commentContent\"> {comment.content} </div>\n                                    </div>\n                                })\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n\n}\n\nexport default Post\n\n",["75","76"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/LoginSignup.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Homepage.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/CommentCreate.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/api/index.js",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/index.js",[],["77","78"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Login.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/index.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"81","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":13,"column":12,"nodeType":"89","messageId":"90","endLine":13,"endColumn":21},{"ruleId":"87","severity":1,"message":"91","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":11,"column":12,"nodeType":"89","messageId":"90","endLine":11,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":27,"column":8,"nodeType":"94","endLine":27,"endColumn":10,"suggestions":"95"},{"ruleId":"79","replacedBy":"96"},{"ruleId":"81","replacedBy":"97"},{"ruleId":"79","replacedBy":"98"},{"ruleId":"81","replacedBy":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],["100"],["101"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["102"],["100"],["101"],["100"],["101"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [fetchData]",{"range":"105","text":"106"},[732,734],"[fetchData]"]