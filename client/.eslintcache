[{"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/index.js":"1","/home/marcus/Desktop/websites/express-blogAPI/client/src/app/index.js":"2","/home/marcus/Desktop/websites/express-blogAPI/client/src/components/NavbarComponent.jsx":"3","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/PostList.jsx":"4","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/SignUp.jsx":"5","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Logout.jsx":"6","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Post.jsx":"7","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/LoginSignup.jsx":"8","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Homepage.jsx":"9","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/CommentCreate.jsx":"10","/home/marcus/Desktop/websites/express-blogAPI/client/src/api/index.js":"11","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/index.js":"12","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Login.jsx":"13","/home/marcus/Desktop/websites/express-blogAPI/client/src/index.js":"14"},{"size":75,"mtime":1607402468920,"results":"15","hashOfConfig":"16"},{"size":1238,"mtime":1607642016758,"results":"17","hashOfConfig":"16"},{"size":1454,"mtime":1607920340629,"results":"18","hashOfConfig":"16"},{"size":2516,"mtime":1607631863115,"results":"19","hashOfConfig":"16"},{"size":1896,"mtime":1608191482813,"results":"20","hashOfConfig":"16"},{"size":710,"mtime":1607321264545,"results":"21","hashOfConfig":"16"},{"size":2384,"mtime":1608185266596,"results":"22","hashOfConfig":"16"},{"size":1042,"mtime":1608185405240,"results":"23","hashOfConfig":"16"},{"size":621,"mtime":1607321003003,"results":"24","hashOfConfig":"16"},{"size":1300,"mtime":1608185366761,"results":"25","hashOfConfig":"16"},{"size":1209,"mtime":1608189750652,"results":"26","hashOfConfig":"16"},{"size":297,"mtime":1607642168353,"results":"27","hashOfConfig":"16"},{"size":2270,"mtime":1608185394748,"results":"28","hashOfConfig":"16"},{"size":141,"mtime":1607028531746,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"140m20v",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/index.js",[],["61","62"],"/home/marcus/Desktop/websites/express-blogAPI/client/src/app/index.js",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/components/NavbarComponent.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/PostList.jsx",["63"],"import React, { useEffect, useState } from 'react'\nimport api from '../api'\nimport { nanoid } from 'nanoid'\nimport { Link } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\n\n\nfunction PostList() {\n\n    const [posts, setPosts] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n\n    useEffect(() => {\n        setIsLoading(true)\n        async function fetchData() {\n            await api.getAllPosts().then(postsRes => {\n                let data = postsRes.data.data\n                let publishedData = data.filter(dataItem => dataItem.published ===true)\n                //let data = postsRes.data.data\n                setPosts(publishedData)\n                setIsLoading(false);\n            })\n        }\n        fetchData();\n    }, [])\n\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex justify-content-center justify-content-md-around flex-wrap text-center\">\n                {\n                    posts.map((item) => {\n                        return (\n                            <Card key={nanoid()} style={{ width: '18rem', margin: '10px' }}>\n                                <Card.Body>\n                                    <Card.Header><b>{item.title} </b></Card.Header>\n                                    <Card.Title> </Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">\n                                        {item.username ? <span> Posted by: <i>{item.username.username} </i> </span> : null}\n                                    </Card.Subtitle>\n\n                                    <Link className=\"text-white\" to={`/posts/${item._id}`} >\n                                        <Button>\n                                            See More\n                                            </Button>\n                                    </Link>\n                                    \n\n\n                                </Card.Body>\n\n                            </Card>\n\n                            /*  <div key={nanoid()}>\n                                   <Link to={`/posts/${item._id}`}> <b> {item.title}  </b></Link>\n                           : {item.content}. {item.username ? <span> Posted by: <i>{item.username.username} </i> </span> : null}\n                               </div>\n                               */\n                        )\n                    })\n\n                }\n            </div>\n        </div>\n\n    )\n\n}\n\n\nexport default PostList\n\n\n","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/SignUp.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Logout.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Post.jsx",["64","65"],"import React, { useEffect, useState } from 'react'\nimport api from '../api'\nimport { nanoid } from 'nanoid'\nimport CommentCreate from \"./CommentCreate\"\n\nfunction Post({ match, user }) {\n\n    const [post, setPost] = useState([]);\n    const [comments, setComments] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n    let postID = match.params.id\n\n\n    async function fetchData() {\n        await api.getPostByID(postID)\n            .then(res => {\n                setPost(res.data.posts);\n                setComments(res.data.comments);\n                setIsLoading(false);\n            })\n    }\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetchData();\n    }, [])\n\n    return (\n        <>\n            <div className='postContainer'>\n                <div className=\"sizeContainer\">\n                    <div>\n                        <h1><b> {post.title}  </b>  </h1>\n\n                        <div className=\"postAuthor\">\n                            By <i> {post.username ? post.username.username : null} </i>\n                        </div>\n                        <br />\n                        {post.content}\n                    </div>\n\n                    <div>\n                        <CommentCreate user={user} postID={postID} fetchData={fetchData} />\n                    </div>\n\n                    <div className=\"allCommentsContainer\">\n                        <b> Comments </b>\n\n                        <div>\n                            {\n                                comments.map(comment => {\n                                    return <div key={nanoid()} className=\"commentContainer\">\n                                        <img src=\"/avatar.jpg\" style={{ width: \"20px\" }} alt=\"avatar\" />\n                                        {comment.username ?\n                                            <span>\n                                                <b>  {comment.username.username} </b>\n                                            </span>\n                                            : null}\n                                        <div className=\"commentContent\"> {comment.content} </div>\n                                    </div>\n                                })\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    )\n\n}\n\nexport default Post\n\n","/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/LoginSignup.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Homepage.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/CommentCreate.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/api/index.js",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/index.js",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/pages/Login.jsx",[],"/home/marcus/Desktop/websites/express-blogAPI/client/src/index.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":13,"column":12,"nodeType":"72","messageId":"73","endLine":13,"endColumn":21},{"ruleId":"70","severity":1,"message":"71","line":10,"column":12,"nodeType":"72","messageId":"73","endLine":10,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":26,"column":8,"nodeType":"76","endLine":26,"endColumn":10,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [fetchData]",{"range":"83","text":"84"},[692,694],"[fetchData]"]